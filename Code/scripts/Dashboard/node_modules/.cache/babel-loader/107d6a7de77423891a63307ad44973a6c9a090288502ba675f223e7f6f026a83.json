{"ast":null,"code":"class PM25DataLoader {\n  constructor() {\n    this.data = null;\n    this.gridData = null;\n    this.isLoaded = false;\n  }\n  async loadData(url = 'pm25_2022_data.json') {\n    try {\n      console.log('Loading PM2.5 data from:', url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      this.data = await response.json();\n      console.log('PM2.5 data loaded successfully');\n      console.log('Data points:', this.data.data.length);\n      console.log('Grid info:', this.data.metadata);\n\n      // 创建快速查找的网格数据结构\n      this.createGridLookup();\n      this.isLoaded = true;\n      return true;\n    } catch (error) {\n      console.error('Error loading PM2.5 data:', error);\n      return false;\n    }\n  }\n  createGridLookup() {\n    // 创建一个基于坐标的快速查找表\n    this.gridData = new Map();\n    for (const point of this.data.data) {\n      const key = `${point.lat.toFixed(2)}_${point.lon.toFixed(2)}`;\n      this.gridData.set(key, point.value);\n    }\n    console.log('Grid lookup created with', this.gridData.size, 'points');\n  }\n  getPM25Value(lat, lon) {\n    if (!this.isLoaded || !this.gridData) {\n      return null;\n    }\n\n    // 首先尝试精确匹配\n    const exactKey = `${lat.toFixed(2)}_${lon.toFixed(2)}`;\n    if (this.gridData.has(exactKey)) {\n      return this.gridData.get(exactKey);\n    }\n\n    // 如果没有精确匹配，找最近的点\n    let minDistance = Infinity;\n    let closestValue = null;\n    for (const point of this.data.data) {\n      const distance = Math.sqrt(Math.pow(point.lat - lat, 2) + Math.pow(point.lon - lon, 2));\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestValue = point.value;\n      }\n\n      // 如果距离很小，直接返回\n      if (distance < 0.1) {\n        break;\n      }\n    }\n\n    // 只返回距离合理的值（不超过1度）\n    return minDistance < 1.0 ? closestValue : null;\n  }\n\n  // 获取数据统计信息\n  getDataStats() {\n    if (!this.isLoaded) return null;\n    const values = this.data.data.map(d => d.value);\n    return {\n      min: Math.min(...values),\n      max: Math.max(...values),\n      count: values.length,\n      metadata: this.data.metadata\n    };\n  }\n}\nexport default PM25DataLoader;","map":{"version":3,"names":["PM25DataLoader","constructor","data","gridData","isLoaded","loadData","url","console","log","response","fetch","ok","Error","status","json","length","metadata","createGridLookup","error","Map","point","key","lat","toFixed","lon","set","value","size","getPM25Value","exactKey","has","get","minDistance","Infinity","closestValue","distance","Math","sqrt","pow","getDataStats","values","map","d","min","max","count"],"sources":["E:/Master2/FYP/Global/Global/dashboard_ComparisionVersion/src/PM25DataLoader.js"],"sourcesContent":["class PM25DataLoader {\r\n  constructor() {\r\n    this.data = null;\r\n    this.gridData = null;\r\n    this.isLoaded = false;\r\n  }\r\n\r\n  async loadData(url = 'pm25_2022_data.json') {\r\n    try {\r\n      console.log('Loading PM2.5 data from:', url);\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      this.data = await response.json();\r\n      console.log('PM2.5 data loaded successfully');\r\n      console.log('Data points:', this.data.data.length);\r\n      console.log('Grid info:', this.data.metadata);\r\n      \r\n      // 创建快速查找的网格数据结构\r\n      this.createGridLookup();\r\n      this.isLoaded = true;\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      console.error('Error loading PM2.5 data:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  createGridLookup() {\r\n    // 创建一个基于坐标的快速查找表\r\n    this.gridData = new Map();\r\n    \r\n    for (const point of this.data.data) {\r\n      const key = `${point.lat.toFixed(2)}_${point.lon.toFixed(2)}`;\r\n      this.gridData.set(key, point.value);\r\n    }\r\n    \r\n    console.log('Grid lookup created with', this.gridData.size, 'points');\r\n  }\r\n\r\n  getPM25Value(lat, lon) {\r\n    if (!this.isLoaded || !this.gridData) {\r\n      return null;\r\n    }\r\n\r\n    // 首先尝试精确匹配\r\n    const exactKey = `${lat.toFixed(2)}_${lon.toFixed(2)}`;\r\n    if (this.gridData.has(exactKey)) {\r\n      return this.gridData.get(exactKey);\r\n    }\r\n\r\n    // 如果没有精确匹配，找最近的点\r\n    let minDistance = Infinity;\r\n    let closestValue = null;\r\n\r\n    for (const point of this.data.data) {\r\n      const distance = Math.sqrt(\r\n        Math.pow(point.lat - lat, 2) + Math.pow(point.lon - lon, 2)\r\n      );\r\n      \r\n      if (distance < minDistance) {\r\n        minDistance = distance;\r\n        closestValue = point.value;\r\n      }\r\n      \r\n      // 如果距离很小，直接返回\r\n      if (distance < 0.1) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // 只返回距离合理的值（不超过1度）\r\n    return minDistance < 1.0 ? closestValue : null;\r\n  }\r\n\r\n  // 获取数据统计信息\r\n  getDataStats() {\r\n    if (!this.isLoaded) return null;\r\n    \r\n    const values = this.data.data.map(d => d.value);\r\n    return {\r\n      min: Math.min(...values),\r\n      max: Math.max(...values),\r\n      count: values.length,\r\n      metadata: this.data.metadata\r\n    };\r\n  }\r\n}\r\n\r\nexport default PM25DataLoader; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}