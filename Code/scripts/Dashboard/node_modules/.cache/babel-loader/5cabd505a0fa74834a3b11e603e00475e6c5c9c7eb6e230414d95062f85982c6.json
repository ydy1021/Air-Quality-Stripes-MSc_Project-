{"ast":null,"code":"export function toString() {\n  const result = [];\n  result.push('DIMENSIONS');\n  for (const dimension of this.dimensions) {\n    result.push(`  ${dimension.name.padEnd(30)} = size: ${dimension.size}`);\n  }\n  result.push('');\n  result.push('GLOBAL ATTRIBUTES');\n  for (const attribute of this.globalAttributes) {\n    result.push(`  ${attribute.name.padEnd(30)} = ${attribute.value}`);\n  }\n  const variables = JSON.parse(JSON.stringify(this.variables));\n  result.push('');\n  result.push('VARIABLES:');\n  for (const variable of variables) {\n    variable.value = this.getDataVariable(variable);\n    let stringify = JSON.stringify(variable.value);\n    if (stringify.length > 50) stringify = stringify.substring(0, 50);\n    if (!isNaN(variable.value.length)) {\n      stringify += ` (length: ${variable.value.length})`;\n    }\n    result.push(`  ${variable.name.padEnd(30)} = ${stringify}`);\n  }\n  return result.join('\\n');\n}","map":{"version":3,"names":["toString","result","push","dimension","dimensions","name","padEnd","size","attribute","globalAttributes","value","variables","JSON","parse","stringify","variable","getDataVariable","length","substring","isNaN","join"],"sources":["E:\\Master2\\FYP\\Global\\Global\\dashboard_ComparisionVersion\\node_modules\\netcdfjs\\src\\toString.ts"],"sourcesContent":["import { NetCDFReader } from './parser';\n\nexport function toString(this: NetCDFReader) {\n  const result = [];\n  result.push('DIMENSIONS');\n  for (const dimension of this.dimensions) {\n    result.push(`  ${dimension.name.padEnd(30)} = size: ${dimension.size}`);\n  }\n\n  result.push('');\n  result.push('GLOBAL ATTRIBUTES');\n  for (const attribute of this.globalAttributes) {\n    result.push(`  ${attribute.name.padEnd(30)} = ${attribute.value}`);\n  }\n\n  const variables = JSON.parse(JSON.stringify(this.variables));\n  result.push('');\n  result.push('VARIABLES:');\n  for (const variable of variables) {\n    variable.value = this.getDataVariable(variable);\n    let stringify = JSON.stringify(variable.value);\n    if (stringify.length > 50) stringify = stringify.substring(0, 50);\n    if (!isNaN(variable.value.length)) {\n      stringify += ` (length: ${variable.value.length})`;\n    }\n    result.push(`  ${variable.name.padEnd(30)} = ${stringify}`);\n  }\n  return result.join('\\n');\n}\n"],"mappings":"AAEA,OAAM,SAAUA,QAAQA,CAAA;EACtB,MAAMC,MAAM,GAAG,EAAE;EACjBA,MAAM,CAACC,IAAI,CAAC,YAAY,CAAC;EACzB,KAAK,MAAMC,SAAS,IAAI,IAAI,CAACC,UAAU,EAAE;IACvCH,MAAM,CAACC,IAAI,CAAC,KAAKC,SAAS,CAACE,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,YAAYH,SAAS,CAACI,IAAI,EAAE,CAAC;;EAGzEN,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;EACfD,MAAM,CAACC,IAAI,CAAC,mBAAmB,CAAC;EAChC,KAAK,MAAMM,SAAS,IAAI,IAAI,CAACC,gBAAgB,EAAE;IAC7CR,MAAM,CAACC,IAAI,CAAC,KAAKM,SAAS,CAACH,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,MAAME,SAAS,CAACE,KAAK,EAAE,CAAC;;EAGpE,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAACH,SAAS,CAAC,CAAC;EAC5DV,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;EACfD,MAAM,CAACC,IAAI,CAAC,YAAY,CAAC;EACzB,KAAK,MAAMa,QAAQ,IAAIJ,SAAS,EAAE;IAChCI,QAAQ,CAACL,KAAK,GAAG,IAAI,CAACM,eAAe,CAACD,QAAQ,CAAC;IAC/C,IAAID,SAAS,GAAGF,IAAI,CAACE,SAAS,CAACC,QAAQ,CAACL,KAAK,CAAC;IAC9C,IAAII,SAAS,CAACG,MAAM,GAAG,EAAE,EAAEH,SAAS,GAAGA,SAAS,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;IACjE,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAACL,KAAK,CAACO,MAAM,CAAC,EAAE;MACjCH,SAAS,IAAI,aAAaC,QAAQ,CAACL,KAAK,CAACO,MAAM,GAAG;;IAEpDhB,MAAM,CAACC,IAAI,CAAC,KAAKa,QAAQ,CAACV,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,MAAMQ,SAAS,EAAE,CAAC;;EAE7D,OAAOb,MAAM,CAACmB,IAAI,CAAC,IAAI,CAAC;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}