{"ast":null,"code":"var _jsxFileName = \"E:\\\\Master2\\\\FYP\\\\Global\\\\Global\\\\dashboard_ComparisionVersion\\\\src\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as d3 from 'd3';\nimport * as topojson from 'topojson-client';\nimport PM25DataLoader from './PM25DataLoader';\nimport PM25Canvas from './PM25Canvas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORLD_GEOJSON_URL = 'world-110m.geojson';\nconst CITIES_JSON = 'cities_with_coords.json';\n\n// PM2.5色阶区间和颜色，与MultiTrendCharts.js保持一致\nconst bounds = [0, 5, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 99999];\nconst c_list = ['rgb(164,255,255)',\n// 0 - 5\n'rgb(176,218,233)',\n// 5 - 10\n'rgb(176,206,237)',\n// 10 - 15\n'rgb(249,224,71)',\n// 15 - 20\n'rgb(242,200,75)',\n// 20 - 30\n'rgb(241,166,63)',\n// 30 - 40\n'rgb(233,135,37)',\n// 40 - 50\n'rgb(175,69,83)',\n// 50 - 60\n'rgb(134,59,71)',\n// 60 - 70\n'rgb(103,58,61)',\n// 70 - 80\n'rgb(70,47,48)',\n// 80 - 90\n'rgb(37,36,36)' // 90+\n];\nfunction getColor(val) {\n  if (val === null || val === undefined || isNaN(val)) return '#e0e0e0';\n  for (let i = 0; i < bounds.length - 1; ++i) {\n    if (val >= bounds[i] && val < bounds[i + 1]) return c_list[i];\n  }\n  return c_list[c_list.length - 1];\n}\nfunction Map({\n  onCitySelect,\n  selectedCities,\n  maxCities = 2\n}) {\n  _s();\n  const svgRef = useRef();\n  const [cities, setCities] = useState([]);\n  const [world, setWorld] = useState(null);\n  const [pm25Loader, setPm25Loader] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [projection, setProjection] = useState(null);\n\n  // 加载数据\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        setIsLoading(true);\n\n        // 并行加载地图和城市数据\n        const [worldData, citiesData] = await Promise.all([d3.json(WORLD_GEOJSON_URL), d3.json(CITIES_JSON)]);\n        setWorld(worldData);\n        setCities(citiesData);\n\n        // 加载PM2.5数据\n        const loader = new PM25DataLoader();\n        const success = await loader.loadData();\n        if (success) {\n          setPm25Loader(loader);\n          console.log('PM2.5 data stats:', loader.getDataStats());\n        } else {\n          console.warn('PM2.5 data loading failed, using default colors');\n        }\n      } catch (error) {\n        console.error('Error loading data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n\n  // 获取地理位置的PM2.5值\n  const getPM25ForLocation = (lat, lon) => {\n    if (!pm25Loader) return null;\n    return pm25Loader.getPM25Value(lat, lon);\n  };\n\n  // 绘制地图\n  useEffect(() => {\n    if (!world || !cities.length || isLoading) return;\n    const width = 1000,\n      height = 500;\n    const svg = d3.select(svgRef.current).attr('width', width).attr('height', height);\n    svg.selectAll('*').remove();\n\n    // 投影\n    const mapProjection = d3.geoNaturalEarth1().fitSize([width, height], world);\n    const path = d3.geoPath().projection(mapProjection);\n    setProjection(() => mapProjection); // 保存投影供Canvas使用\n\n    // 首先绘制基础地图（作为背景）\n    svg.append('g').selectAll('path').data(world.features).enter().append('path').attr('d', path).attr('fill', '#f0f0f0').attr('stroke', '#ccc').attr('stroke-width', 0.5);\n\n    // Canvas渲染PM2.5网格将在单独的Canvas组件中处理\n\n    // 重新绘制国家边界（在网格之上）\n    svg.append('g').selectAll('path').data(world.features).enter().append('path').attr('d', path).attr('fill', 'none').attr('stroke', '#666').attr('stroke-width', 0.8).style('pointer-events', 'all') // 确保可以接收鼠标事件\n    .append('title').text(d => {\n      const countryName = d.properties.NAME || d.properties.name || 'Unknown';\n      const centroid = d3.geoCentroid(d);\n      const [lon, lat] = centroid;\n      const pm25Value = getPM25ForLocation(lat, lon);\n      return pm25Value !== null ? `${countryName}\\nCenter PM2.5 (2022): ${pm25Value.toFixed(1)} µg/m³` : `${countryName}`;\n    });\n\n    // 绘制城市点\n    svg.append('g').selectAll('circle').data(cities).enter().append('circle').attr('cx', d => mapProjection([d.lng, d.lat])[0]).attr('cy', d => mapProjection([d.lng, d.lat])[1]).attr('r', 4).attr('fill', d => selectedCities.find(c => c.city === d.city && c.country === d.country) ? '#d32f2f' : '#1976d2').attr('stroke', '#fff').attr('stroke-width', 2).style('cursor', 'pointer').style('z-index', 10) // 确保城市点在最上层\n    .on('click', (event, d) => {\n      onCitySelect(d);\n    }).append('title').text(d => {\n      const pm25Value = getPM25ForLocation(d.lat, d.lng);\n      return pm25Value !== null ? `${d.city}, ${d.country}\\nPM2.5 (2022): ${pm25Value.toFixed(1)} µg/m³` : `${d.city}, ${d.country}\\nPM2.5: No data`;\n    });\n\n    // 添加色阶图例\n    if (pm25Loader) {\n      const legendWidth = 300;\n      const legendHeight = 20;\n      const legendX = width - legendWidth - 20;\n      const legendY = height - 60;\n\n      // 图例背景\n      svg.append('rect').attr('x', legendX - 10).attr('y', legendY - 25).attr('width', legendWidth + 20).attr('height', 50).attr('fill', 'white').attr('stroke', '#ccc').attr('rx', 5);\n\n      // 色阶条\n      const legendScale = d3.scaleLinear().domain([0, bounds.length - 2]).range([0, legendWidth]);\n      svg.append('g').selectAll('rect').data(c_list.slice(0, -1)) // 排除最后一个颜色（90+）\n      .enter().append('rect').attr('x', (d, i) => legendX + legendScale(i)).attr('y', legendY).attr('width', legendWidth / (c_list.length - 1)).attr('height', legendHeight).attr('fill', d => d);\n\n      // 图例标题\n      svg.append('text').attr('x', legendX).attr('y', legendY - 5).attr('font-size', 12).attr('font-weight', 'bold').text('PM2.5 Concentration (µg/m³) - 2022');\n\n      // 数值标签\n      const labelValues = [0, 10, 20, 30, 50, 70, 90];\n      svg.append('g').selectAll('text').data(labelValues).enter().append('text').attr('x', d => {\n        const index = bounds.findIndex(b => b >= d);\n        return legendX + legendScale(Math.max(0, index));\n      }).attr('y', legendY + legendHeight + 15).attr('text-anchor', 'middle').attr('font-size', 10).text(d => d);\n    }\n  }, [world, cities, selectedCities, onCitySelect, maxCities, pm25Loader, isLoading]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: 20,\n        color: '#666'\n      },\n      children: \"Loading PM2.5 data and map...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        display: 'inline-block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        ref: svgRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), projection && pm25Loader && /*#__PURE__*/_jsxDEV(PM25Canvas, {\n        pm25Loader: pm25Loader,\n        projection: projection,\n        width: 1000,\n        height: 500\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 8,\n        color: '#888'\n      },\n      children: pm25Loader ? ' Map colored by PM2.5 concentration (2022). ' : '* Loading PM2.5 data for map coloring...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n_s(Map, \"umX7DxPJzxjFSlSCnwrKpVqvFds=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useEffect","useRef","useState","d3","topojson","PM25DataLoader","PM25Canvas","jsxDEV","_jsxDEV","WORLD_GEOJSON_URL","CITIES_JSON","bounds","c_list","getColor","val","undefined","isNaN","i","length","Map","onCitySelect","selectedCities","maxCities","_s","svgRef","cities","setCities","world","setWorld","pm25Loader","setPm25Loader","isLoading","setIsLoading","projection","setProjection","loadData","worldData","citiesData","Promise","all","json","loader","success","console","log","getDataStats","warn","error","getPM25ForLocation","lat","lon","getPM25Value","width","height","svg","select","current","attr","selectAll","remove","mapProjection","geoNaturalEarth1","fitSize","path","geoPath","append","data","features","enter","style","text","d","countryName","properties","NAME","name","centroid","geoCentroid","pm25Value","toFixed","lng","find","c","city","country","on","event","legendWidth","legendHeight","legendX","legendY","legendScale","scaleLinear","domain","range","slice","labelValues","index","findIndex","b","Math","max","textAlign","children","margin","color","fileName","_jsxFileName","lineNumber","columnNumber","position","display","ref","marginTop","_c","$RefreshReg$"],"sources":["E:/Master2/FYP/Global/Global/dashboard_ComparisionVersion/src/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport * as d3 from 'd3';\r\nimport * as topojson from 'topojson-client';\r\nimport PM25DataLoader from './PM25DataLoader';\r\nimport PM25Canvas from './PM25Canvas';\r\n\r\nconst WORLD_GEOJSON_URL = 'world-110m.geojson';\r\nconst CITIES_JSON = 'cities_with_coords.json';\r\n\r\n// PM2.5色阶区间和颜色，与MultiTrendCharts.js保持一致\r\nconst bounds = [0, 5, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 99999];\r\nconst c_list = [\r\n  'rgb(164,255,255)',  // 0 - 5\r\n  'rgb(176,218,233)',  // 5 - 10\r\n  'rgb(176,206,237)',  // 10 - 15\r\n  'rgb(249,224,71)',   // 15 - 20\r\n  'rgb(242,200,75)',   // 20 - 30\r\n  'rgb(241,166,63)',   // 30 - 40\r\n  'rgb(233,135,37)',   // 40 - 50\r\n  'rgb(175,69,83)',    // 50 - 60\r\n  'rgb(134,59,71)',    // 60 - 70\r\n  'rgb(103,58,61)',    // 70 - 80\r\n  'rgb(70,47,48)',     // 80 - 90\r\n  'rgb(37,36,36)',     // 90+\r\n];\r\n\r\nfunction getColor(val) {\r\n  if (val === null || val === undefined || isNaN(val)) return '#e0e0e0';\r\n  for (let i = 0; i < bounds.length - 1; ++i) {\r\n    if (val >= bounds[i] && val < bounds[i + 1]) return c_list[i];\r\n  }\r\n  return c_list[c_list.length - 1];\r\n}\r\n\r\nfunction Map({ onCitySelect, selectedCities, maxCities = 2 }) {\r\n  const svgRef = useRef();\r\n  const [cities, setCities] = useState([]);\r\n  const [world, setWorld] = useState(null);\r\n  const [pm25Loader, setPm25Loader] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [projection, setProjection] = useState(null);\r\n\r\n  // 加载数据\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        \r\n        // 并行加载地图和城市数据\r\n        const [worldData, citiesData] = await Promise.all([\r\n          d3.json(WORLD_GEOJSON_URL),\r\n          d3.json(CITIES_JSON)\r\n        ]);\r\n        \r\n        setWorld(worldData);\r\n        setCities(citiesData);\r\n        \r\n        // 加载PM2.5数据\r\n        const loader = new PM25DataLoader();\r\n        const success = await loader.loadData();\r\n        if (success) {\r\n          setPm25Loader(loader);\r\n          console.log('PM2.5 data stats:', loader.getDataStats());\r\n        } else {\r\n          console.warn('PM2.5 data loading failed, using default colors');\r\n        }\r\n        \r\n      } catch (error) {\r\n        console.error('Error loading data:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadData();\r\n  }, []);\r\n\r\n  // 获取地理位置的PM2.5值\r\n  const getPM25ForLocation = (lat, lon) => {\r\n    if (!pm25Loader) return null;\r\n    return pm25Loader.getPM25Value(lat, lon);\r\n  };\r\n\r\n  // 绘制地图\r\n  useEffect(() => {\r\n    if (!world || !cities.length || isLoading) return;\r\n    \r\n    const width = 1000, height = 500;\r\n    const svg = d3.select(svgRef.current)\r\n      .attr('width', width)\r\n      .attr('height', height);\r\n    svg.selectAll('*').remove();\r\n\r\n    // 投影\r\n    const mapProjection = d3.geoNaturalEarth1().fitSize([width, height], world);\r\n    const path = d3.geoPath().projection(mapProjection);\r\n    setProjection(() => mapProjection); // 保存投影供Canvas使用\r\n\r\n    // 首先绘制基础地图（作为背景）\r\n    svg.append('g')\r\n      .selectAll('path')\r\n      .data(world.features)\r\n      .enter()\r\n      .append('path')\r\n      .attr('d', path)\r\n      .attr('fill', '#f0f0f0')\r\n      .attr('stroke', '#ccc')\r\n      .attr('stroke-width', 0.5);\r\n\r\n    // Canvas渲染PM2.5网格将在单独的Canvas组件中处理\r\n\r\n    // 重新绘制国家边界（在网格之上）\r\n    svg.append('g')\r\n      .selectAll('path')\r\n      .data(world.features)\r\n      .enter()\r\n      .append('path')\r\n      .attr('d', path)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', '#666')\r\n      .attr('stroke-width', 0.8)\r\n      .style('pointer-events', 'all') // 确保可以接收鼠标事件\r\n      .append('title')\r\n      .text(d => {\r\n        const countryName = d.properties.NAME || d.properties.name || 'Unknown';\r\n        const centroid = d3.geoCentroid(d);\r\n        const [lon, lat] = centroid;\r\n        const pm25Value = getPM25ForLocation(lat, lon);\r\n        return pm25Value !== null \r\n          ? `${countryName}\\nCenter PM2.5 (2022): ${pm25Value.toFixed(1)} µg/m³`\r\n          : `${countryName}`;\r\n      });\r\n\r\n    // 绘制城市点\r\n    svg.append('g')\r\n      .selectAll('circle')\r\n      .data(cities)\r\n      .enter()\r\n      .append('circle')\r\n      .attr('cx', d => mapProjection([d.lng, d.lat])[0])\r\n      .attr('cy', d => mapProjection([d.lng, d.lat])[1])\r\n      .attr('r', 4)\r\n      .attr('fill', d => selectedCities.find(c => c.city === d.city && c.country === d.country) ? '#d32f2f' : '#1976d2')\r\n      .attr('stroke', '#fff')\r\n      .attr('stroke-width', 2)\r\n      .style('cursor', 'pointer')\r\n      .style('z-index', 10) // 确保城市点在最上层\r\n      .on('click', (event, d) => {\r\n        onCitySelect(d);\r\n      })\r\n      .append('title')\r\n      .text(d => {\r\n        const pm25Value = getPM25ForLocation(d.lat, d.lng);\r\n        return pm25Value !== null \r\n          ? `${d.city}, ${d.country}\\nPM2.5 (2022): ${pm25Value.toFixed(1)} µg/m³`\r\n          : `${d.city}, ${d.country}\\nPM2.5: No data`;\r\n      });\r\n\r\n    // 添加色阶图例\r\n    if (pm25Loader) {\r\n      const legendWidth = 300;\r\n      const legendHeight = 20;\r\n      const legendX = width - legendWidth - 20;\r\n      const legendY = height - 60;\r\n\r\n      // 图例背景\r\n      svg.append('rect')\r\n        .attr('x', legendX - 10)\r\n        .attr('y', legendY - 25)\r\n        .attr('width', legendWidth + 20)\r\n        .attr('height', 50)\r\n        .attr('fill', 'white')\r\n        .attr('stroke', '#ccc')\r\n        .attr('rx', 5);\r\n\r\n      // 色阶条\r\n      const legendScale = d3.scaleLinear()\r\n        .domain([0, bounds.length - 2])\r\n        .range([0, legendWidth]);\r\n\r\n      svg.append('g')\r\n        .selectAll('rect')\r\n        .data(c_list.slice(0, -1)) // 排除最后一个颜色（90+）\r\n        .enter()\r\n        .append('rect')\r\n        .attr('x', (d, i) => legendX + legendScale(i))\r\n        .attr('y', legendY)\r\n        .attr('width', legendWidth / (c_list.length - 1))\r\n        .attr('height', legendHeight)\r\n        .attr('fill', d => d);\r\n\r\n      // 图例标题\r\n      svg.append('text')\r\n        .attr('x', legendX)\r\n        .attr('y', legendY - 5)\r\n        .attr('font-size', 12)\r\n        .attr('font-weight', 'bold')\r\n        .text('PM2.5 Concentration (µg/m³) - 2022');\r\n\r\n      // 数值标签\r\n      const labelValues = [0, 10, 20, 30, 50, 70, 90];\r\n      svg.append('g')\r\n        .selectAll('text')\r\n        .data(labelValues)\r\n        .enter()\r\n        .append('text')\r\n        .attr('x', d => {\r\n          const index = bounds.findIndex(b => b >= d);\r\n          return legendX + legendScale(Math.max(0, index));\r\n        })\r\n        .attr('y', legendY + legendHeight + 15)\r\n        .attr('text-anchor', 'middle')\r\n        .attr('font-size', 10)\r\n        .text(d => d);\r\n    }\r\n  }, [world, cities, selectedCities, onCitySelect, maxCities, pm25Loader, isLoading]);\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center' }}>\r\n      {isLoading && (\r\n        <div style={{ margin: 20, color: '#666' }}>\r\n          Loading PM2.5 data and map...\r\n        </div>\r\n      )}\r\n      <div style={{ position: 'relative', display: 'inline-block' }}>\r\n        <svg ref={svgRef}></svg>\r\n        {/* Canvas渲染PM2.5网格 */}\r\n        {projection && pm25Loader && (\r\n          <PM25Canvas \r\n            pm25Loader={pm25Loader}\r\n            projection={projection}\r\n            width={1000}\r\n            height={500}\r\n          />\r\n        )}\r\n      </div>\r\n      <div style={{marginTop: 8, color: '#888'}}>\r\n        {pm25Loader ? \r\n          ' Map colored by PM2.5 concentration (2022). ' :\r\n          '* Loading PM2.5 data for map coloring...'\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}