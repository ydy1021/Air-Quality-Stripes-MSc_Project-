{"ast":null,"code":"import NetCDF from 'netcdfjs';\nclass NetCDFReader {\n  constructor() {\n    this.data = null;\n    this.pm25_2022 = null;\n    this.lats = null;\n    this.lons = null;\n  }\n  async loadData(url) {\n    try {\n      console.log('Loading NetCDF file...');\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const arrayBuffer = await response.arrayBuffer();\n      this.data = new NetCDF(arrayBuffer);\n      console.log('NetCDF file loaded successfully');\n      console.log('Variables:', Object.keys(this.data.variables));\n      console.log('Dimensions:', Object.keys(this.data.dimensions));\n\n      // 提取坐标信息\n      this.lats = this.data.getDataVariable('lat');\n      this.lons = this.data.getDataVariable('lon');\n      console.log('Latitude range:', Math.min(...this.lats), 'to', Math.max(...this.lats));\n      console.log('Longitude range:', Math.min(...this.lons), 'to', Math.max(...this.lons));\n\n      // 提取时间信息\n      const times = this.data.getDataVariable('time');\n      console.log('Time dimension:', times.length);\n\n      // 提取2022年的PM2.5数据 (假设时间维度的最后一个是2022年)\n      const pm25Variable = this.data.variables['PM25'];\n      if (pm25Variable) {\n        // 获取最后一个时间步的数据（通常是最新年份）\n        const timeIndex = times.length - 1;\n        console.log('Extracting PM2.5 data for time index:', timeIndex);\n\n        // 读取PM2.5数据 [time, lat, lon]\n        const pm25Data = this.data.getDataVariable('PM25');\n\n        // 提取2022年的数据\n        const latLen = this.lats.length;\n        const lonLen = this.lons.length;\n        this.pm25_2022 = new Float32Array(latLen * lonLen);\n        const startIndex = timeIndex * latLen * lonLen;\n        for (let i = 0; i < latLen * lonLen; i++) {\n          this.pm25_2022[i] = pm25Data[startIndex + i];\n        }\n        console.log('PM2.5 data extracted for 2022');\n        console.log('PM2.5 range:', Math.min(...this.pm25_2022), 'to', Math.max(...this.pm25_2022));\n      }\n      return true;\n    } catch (error) {\n      console.error('Error loading NetCDF file:', error);\n      return false;\n    }\n  }\n  getPM25Value(lat, lon) {\n    if (!this.pm25_2022 || !this.lats || !this.lons) {\n      return null;\n    }\n\n    // 找到最近的网格点\n    let latIndex = 0;\n    let lonIndex = 0;\n    let minLatDist = Math.abs(this.lats[0] - lat);\n    let minLonDist = Math.abs(this.lons[0] - lon);\n    for (let i = 1; i < this.lats.length; i++) {\n      const dist = Math.abs(this.lats[i] - lat);\n      if (dist < minLatDist) {\n        minLatDist = dist;\n        latIndex = i;\n      }\n    }\n    for (let i = 1; i < this.lons.length; i++) {\n      const dist = Math.abs(this.lons[i] - lon);\n      if (dist < minLonDist) {\n        minLonDist = dist;\n        lonIndex = i;\n      }\n    }\n    const index = latIndex * this.lons.length + lonIndex;\n    return this.pm25_2022[index];\n  }\n\n  // 获取网格化的PM2.5数据用于地图着色\n  getGridData() {\n    if (!this.pm25_2022 || !this.lats || !this.lons) {\n      return null;\n    }\n    return {\n      data: this.pm25_2022,\n      lats: this.lats,\n      lons: this.lons,\n      latLen: this.lats.length,\n      lonLen: this.lons.length\n    };\n  }\n}\nexport default NetCDFReader;","map":{"version":3,"names":["NetCDF","NetCDFReader","constructor","data","pm25_2022","lats","lons","loadData","url","console","log","response","fetch","ok","Error","status","arrayBuffer","Object","keys","variables","dimensions","getDataVariable","Math","min","max","times","length","pm25Variable","timeIndex","pm25Data","latLen","lonLen","Float32Array","startIndex","i","error","getPM25Value","lat","lon","latIndex","lonIndex","minLatDist","abs","minLonDist","dist","index","getGridData"],"sources":["E:/Master2/FYP/Global/Global/dashboard_ComparisionVersion/src/NetCDFReader.js"],"sourcesContent":["import NetCDF from 'netcdfjs';\r\n\r\nclass NetCDFReader {\r\n  constructor() {\r\n    this.data = null;\r\n    this.pm25_2022 = null;\r\n    this.lats = null;\r\n    this.lons = null;\r\n  }\r\n\r\n  async loadData(url) {\r\n    try {\r\n      console.log('Loading NetCDF file...');\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      const arrayBuffer = await response.arrayBuffer();\r\n      this.data = new NetCDF(arrayBuffer);\r\n      \r\n      console.log('NetCDF file loaded successfully');\r\n      console.log('Variables:', Object.keys(this.data.variables));\r\n      console.log('Dimensions:', Object.keys(this.data.dimensions));\r\n      \r\n      // 提取坐标信息\r\n      this.lats = this.data.getDataVariable('lat');\r\n      this.lons = this.data.getDataVariable('lon');\r\n      \r\n      console.log('Latitude range:', Math.min(...this.lats), 'to', Math.max(...this.lats));\r\n      console.log('Longitude range:', Math.min(...this.lons), 'to', Math.max(...this.lons));\r\n      \r\n      // 提取时间信息\r\n      const times = this.data.getDataVariable('time');\r\n      console.log('Time dimension:', times.length);\r\n      \r\n      // 提取2022年的PM2.5数据 (假设时间维度的最后一个是2022年)\r\n      const pm25Variable = this.data.variables['PM25'];\r\n      if (pm25Variable) {\r\n        // 获取最后一个时间步的数据（通常是最新年份）\r\n        const timeIndex = times.length - 1;\r\n        console.log('Extracting PM2.5 data for time index:', timeIndex);\r\n        \r\n        // 读取PM2.5数据 [time, lat, lon]\r\n        const pm25Data = this.data.getDataVariable('PM25');\r\n        \r\n        // 提取2022年的数据\r\n        const latLen = this.lats.length;\r\n        const lonLen = this.lons.length;\r\n        this.pm25_2022 = new Float32Array(latLen * lonLen);\r\n        \r\n        const startIndex = timeIndex * latLen * lonLen;\r\n        for (let i = 0; i < latLen * lonLen; i++) {\r\n          this.pm25_2022[i] = pm25Data[startIndex + i];\r\n        }\r\n        \r\n        console.log('PM2.5 data extracted for 2022');\r\n        console.log('PM2.5 range:', Math.min(...this.pm25_2022), 'to', Math.max(...this.pm25_2022));\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error loading NetCDF file:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getPM25Value(lat, lon) {\r\n    if (!this.pm25_2022 || !this.lats || !this.lons) {\r\n      return null;\r\n    }\r\n\r\n    // 找到最近的网格点\r\n    let latIndex = 0;\r\n    let lonIndex = 0;\r\n    let minLatDist = Math.abs(this.lats[0] - lat);\r\n    let minLonDist = Math.abs(this.lons[0] - lon);\r\n\r\n    for (let i = 1; i < this.lats.length; i++) {\r\n      const dist = Math.abs(this.lats[i] - lat);\r\n      if (dist < minLatDist) {\r\n        minLatDist = dist;\r\n        latIndex = i;\r\n      }\r\n    }\r\n\r\n    for (let i = 1; i < this.lons.length; i++) {\r\n      const dist = Math.abs(this.lons[i] - lon);\r\n      if (dist < minLonDist) {\r\n        minLonDist = dist;\r\n        lonIndex = i;\r\n      }\r\n    }\r\n\r\n    const index = latIndex * this.lons.length + lonIndex;\r\n    return this.pm25_2022[index];\r\n  }\r\n\r\n  // 获取网格化的PM2.5数据用于地图着色\r\n  getGridData() {\r\n    if (!this.pm25_2022 || !this.lats || !this.lons) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      data: this.pm25_2022,\r\n      lats: this.lats,\r\n      lons: this.lons,\r\n      latLen: this.lats.length,\r\n      lonLen: this.lons.length\r\n    };\r\n  }\r\n}\r\n\r\nexport default NetCDFReader; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}