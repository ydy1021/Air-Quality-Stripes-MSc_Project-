{"ast":null,"code":"import NetCDF from 'netcdfjs';\nclass NetCDFReader {\n  constructor() {\n    this.data = null;\n    this.pm25_2022 = null;\n    this.lats = null;\n    this.lons = null;\n  }\n  async loadData(url) {\n    try {\n      console.log('Starting to load NetCDF file from:', url);\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      console.log('NetCDF file fetched, size:', response.headers.get('content-length'));\n      const arrayBuffer = await response.arrayBuffer();\n      console.log('ArrayBuffer created, size:', arrayBuffer.byteLength);\n      this.data = new NetCDF(arrayBuffer);\n      console.log('NetCDF object created successfully');\n\n      // 打印文件信息\n      console.log('Variables:', Object.keys(this.data.variables));\n      console.log('Dimensions:', Object.keys(this.data.dimensions));\n\n      // 尝试获取变量信息\n      for (const varName of Object.keys(this.data.variables)) {\n        const variable = this.data.variables[varName];\n        console.log(`Variable ${varName}:`, {\n          dimensions: variable.dimensions,\n          shape: variable.shape,\n          type: variable.type\n        });\n      }\n\n      // 尝试获取坐标变量\n      const possibleLatNames = ['lat', 'latitude', 'y'];\n      const possibleLonNames = ['lon', 'longitude', 'x'];\n      const possiblePM25Names = ['PM25', 'pm25', 'PM2_5', 'pm2_5'];\n      let latVar = null,\n        lonVar = null,\n        pm25Var = null;\n      for (const name of possibleLatNames) {\n        if (this.data.variables[name]) {\n          latVar = name;\n          break;\n        }\n      }\n      for (const name of possibleLonNames) {\n        if (this.data.variables[name]) {\n          lonVar = name;\n          break;\n        }\n      }\n      for (const name of possiblePM25Names) {\n        if (this.data.variables[name]) {\n          pm25Var = name;\n          break;\n        }\n      }\n      console.log('Found variables:', {\n        lat: latVar,\n        lon: lonVar,\n        pm25: pm25Var\n      });\n      if (!latVar || !lonVar || !pm25Var) {\n        console.error('Required variables not found');\n        return false;\n      }\n\n      // 提取坐标信息\n      this.lats = this.data.getDataVariable(latVar);\n      this.lons = this.data.getDataVariable(lonVar);\n      console.log('Coordinates loaded:');\n      console.log('Latitude range:', Math.min(...this.lats), 'to', Math.max(...this.lats));\n      console.log('Longitude range:', Math.min(...this.lons), 'to', Math.max(...this.lons));\n      console.log('Grid size:', this.lats.length, 'x', this.lons.length);\n\n      // 提取PM2.5数据\n      const pm25Data = this.data.getDataVariable(pm25Var);\n      console.log('PM2.5 data loaded, total size:', pm25Data.length);\n\n      // 检查数据维度\n      const pm25Variable = this.data.variables[pm25Var];\n      const timeVarName = pm25Variable.dimensions.find(dim => dim.includes('time') || dim.includes('t'));\n      if (timeVarName && this.data.variables[timeVarName]) {\n        const times = this.data.getDataVariable(timeVarName);\n        console.log('Time dimension found:', times.length, 'time steps');\n\n        // 获取最后一个时间步的数据（假设是2022年）\n        const timeIndex = times.length - 1;\n        const latLen = this.lats.length;\n        const lonLen = this.lons.length;\n        this.pm25_2022 = new Float32Array(latLen * lonLen);\n        const startIndex = timeIndex * latLen * lonLen;\n        for (let i = 0; i < latLen * lonLen; i++) {\n          this.pm25_2022[i] = pm25Data[startIndex + i];\n        }\n      } else {\n        // 如果没有时间维度，直接使用所有数据\n        console.log('No time dimension found, using all data as 2022');\n        this.pm25_2022 = new Float32Array(pm25Data);\n      }\n\n      // 检查数据质量\n      const validData = this.pm25_2022.filter(v => !isNaN(v) && v !== null && v !== undefined);\n      console.log('PM2.5 data statistics:');\n      console.log('Valid data points:', validData.length, '/', this.pm25_2022.length);\n      if (validData.length > 0) {\n        console.log('PM2.5 range:', Math.min(...validData), 'to', Math.max(...validData));\n      }\n      return true;\n    } catch (error) {\n      console.error('Error loading NetCDF file:', error);\n      console.error('Error stack:', error.stack);\n      return false;\n    }\n  }\n  getPM25Value(lat, lon) {\n    if (!this.pm25_2022 || !this.lats || !this.lons) {\n      return null;\n    }\n\n    // 找到最近的网格点\n    let latIndex = 0;\n    let lonIndex = 0;\n    let minLatDist = Math.abs(this.lats[0] - lat);\n    let minLonDist = Math.abs(this.lons[0] - lon);\n    for (let i = 1; i < this.lats.length; i++) {\n      const dist = Math.abs(this.lats[i] - lat);\n      if (dist < minLatDist) {\n        minLatDist = dist;\n        latIndex = i;\n      }\n    }\n    for (let i = 1; i < this.lons.length; i++) {\n      const dist = Math.abs(this.lons[i] - lon);\n      if (dist < minLonDist) {\n        minLonDist = dist;\n        lonIndex = i;\n      }\n    }\n    const index = latIndex * this.lons.length + lonIndex;\n    const value = this.pm25_2022[index];\n\n    // 返回有效的数值\n    return isNaN(value) || value === null || value === undefined ? null : value;\n  }\n\n  // 获取网格化的PM2.5数据用于地图着色\n  getGridData() {\n    if (!this.pm25_2022 || !this.lats || !this.lons) {\n      return null;\n    }\n    return {\n      data: this.pm25_2022,\n      lats: this.lats,\n      lons: this.lons,\n      latLen: this.lats.length,\n      lonLen: this.lons.length\n    };\n  }\n}\nexport default NetCDFReader;","map":{"version":3,"names":["NetCDF","NetCDFReader","constructor","data","pm25_2022","lats","lons","loadData","url","console","log","response","fetch","ok","Error","status","headers","get","arrayBuffer","byteLength","Object","keys","variables","dimensions","varName","variable","shape","type","possibleLatNames","possibleLonNames","possiblePM25Names","latVar","lonVar","pm25Var","name","lat","lon","pm25","error","getDataVariable","Math","min","max","length","pm25Data","pm25Variable","timeVarName","find","dim","includes","times","timeIndex","latLen","lonLen","Float32Array","startIndex","i","validData","filter","v","isNaN","undefined","stack","getPM25Value","latIndex","lonIndex","minLatDist","abs","minLonDist","dist","index","value","getGridData"],"sources":["E:/Master2/FYP/Global/Global/dashboard_ComparisionVersion/src/NetCDFReader.js"],"sourcesContent":["import NetCDF from 'netcdfjs';\r\n\r\nclass NetCDFReader {\r\n  constructor() {\r\n    this.data = null;\r\n    this.pm25_2022 = null;\r\n    this.lats = null;\r\n    this.lons = null;\r\n  }\r\n\r\n  async loadData(url) {\r\n    try {\r\n      console.log('Starting to load NetCDF file from:', url);\r\n      \r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      console.log('NetCDF file fetched, size:', response.headers.get('content-length'));\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      console.log('ArrayBuffer created, size:', arrayBuffer.byteLength);\r\n      \r\n      this.data = new NetCDF(arrayBuffer);\r\n      console.log('NetCDF object created successfully');\r\n      \r\n      // 打印文件信息\r\n      console.log('Variables:', Object.keys(this.data.variables));\r\n      console.log('Dimensions:', Object.keys(this.data.dimensions));\r\n      \r\n      // 尝试获取变量信息\r\n      for (const varName of Object.keys(this.data.variables)) {\r\n        const variable = this.data.variables[varName];\r\n        console.log(`Variable ${varName}:`, {\r\n          dimensions: variable.dimensions,\r\n          shape: variable.shape,\r\n          type: variable.type\r\n        });\r\n      }\r\n      \r\n      // 尝试获取坐标变量\r\n      const possibleLatNames = ['lat', 'latitude', 'y'];\r\n      const possibleLonNames = ['lon', 'longitude', 'x'];\r\n      const possiblePM25Names = ['PM25', 'pm25', 'PM2_5', 'pm2_5'];\r\n      \r\n      let latVar = null, lonVar = null, pm25Var = null;\r\n      \r\n      for (const name of possibleLatNames) {\r\n        if (this.data.variables[name]) {\r\n          latVar = name;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      for (const name of possibleLonNames) {\r\n        if (this.data.variables[name]) {\r\n          lonVar = name;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      for (const name of possiblePM25Names) {\r\n        if (this.data.variables[name]) {\r\n          pm25Var = name;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      console.log('Found variables:', { lat: latVar, lon: lonVar, pm25: pm25Var });\r\n      \r\n      if (!latVar || !lonVar || !pm25Var) {\r\n        console.error('Required variables not found');\r\n        return false;\r\n      }\r\n      \r\n      // 提取坐标信息\r\n      this.lats = this.data.getDataVariable(latVar);\r\n      this.lons = this.data.getDataVariable(lonVar);\r\n      \r\n      console.log('Coordinates loaded:');\r\n      console.log('Latitude range:', Math.min(...this.lats), 'to', Math.max(...this.lats));\r\n      console.log('Longitude range:', Math.min(...this.lons), 'to', Math.max(...this.lons));\r\n      console.log('Grid size:', this.lats.length, 'x', this.lons.length);\r\n      \r\n      // 提取PM2.5数据\r\n      const pm25Data = this.data.getDataVariable(pm25Var);\r\n      console.log('PM2.5 data loaded, total size:', pm25Data.length);\r\n      \r\n      // 检查数据维度\r\n      const pm25Variable = this.data.variables[pm25Var];\r\n      const timeVarName = pm25Variable.dimensions.find(dim => \r\n        dim.includes('time') || dim.includes('t')\r\n      );\r\n      \r\n      if (timeVarName && this.data.variables[timeVarName]) {\r\n        const times = this.data.getDataVariable(timeVarName);\r\n        console.log('Time dimension found:', times.length, 'time steps');\r\n        \r\n        // 获取最后一个时间步的数据（假设是2022年）\r\n        const timeIndex = times.length - 1;\r\n        const latLen = this.lats.length;\r\n        const lonLen = this.lons.length;\r\n        \r\n        this.pm25_2022 = new Float32Array(latLen * lonLen);\r\n        const startIndex = timeIndex * latLen * lonLen;\r\n        \r\n        for (let i = 0; i < latLen * lonLen; i++) {\r\n          this.pm25_2022[i] = pm25Data[startIndex + i];\r\n        }\r\n      } else {\r\n        // 如果没有时间维度，直接使用所有数据\r\n        console.log('No time dimension found, using all data as 2022');\r\n        this.pm25_2022 = new Float32Array(pm25Data);\r\n      }\r\n      \r\n      // 检查数据质量\r\n      const validData = this.pm25_2022.filter(v => !isNaN(v) && v !== null && v !== undefined);\r\n      console.log('PM2.5 data statistics:');\r\n      console.log('Valid data points:', validData.length, '/', this.pm25_2022.length);\r\n      if (validData.length > 0) {\r\n        console.log('PM2.5 range:', Math.min(...validData), 'to', Math.max(...validData));\r\n      }\r\n      \r\n      return true;\r\n      \r\n    } catch (error) {\r\n      console.error('Error loading NetCDF file:', error);\r\n      console.error('Error stack:', error.stack);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getPM25Value(lat, lon) {\r\n    if (!this.pm25_2022 || !this.lats || !this.lons) {\r\n      return null;\r\n    }\r\n\r\n    // 找到最近的网格点\r\n    let latIndex = 0;\r\n    let lonIndex = 0;\r\n    let minLatDist = Math.abs(this.lats[0] - lat);\r\n    let minLonDist = Math.abs(this.lons[0] - lon);\r\n\r\n    for (let i = 1; i < this.lats.length; i++) {\r\n      const dist = Math.abs(this.lats[i] - lat);\r\n      if (dist < minLatDist) {\r\n        minLatDist = dist;\r\n        latIndex = i;\r\n      }\r\n    }\r\n\r\n    for (let i = 1; i < this.lons.length; i++) {\r\n      const dist = Math.abs(this.lons[i] - lon);\r\n      if (dist < minLonDist) {\r\n        minLonDist = dist;\r\n        lonIndex = i;\r\n      }\r\n    }\r\n\r\n    const index = latIndex * this.lons.length + lonIndex;\r\n    const value = this.pm25_2022[index];\r\n    \r\n    // 返回有效的数值\r\n    return (isNaN(value) || value === null || value === undefined) ? null : value;\r\n  }\r\n\r\n  // 获取网格化的PM2.5数据用于地图着色\r\n  getGridData() {\r\n    if (!this.pm25_2022 || !this.lats || !this.lons) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      data: this.pm25_2022,\r\n      lats: this.lats,\r\n      lons: this.lons,\r\n      latLen: this.lats.length,\r\n      lonLen: this.lons.length\r\n    };\r\n  }\r\n}\r\n\r\nexport default NetCDFReader; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}