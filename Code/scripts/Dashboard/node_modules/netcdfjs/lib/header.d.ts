import { IOBuffer } from 'iobuffer';
export interface Header {
    recordDimension: {
        /**
      Length of the record dimension
      sum of the varSize's of all the record variables.
      */
        length: number;
        id?: number;
        name?: string;
        recordStep?: number;
    };
    version: number;
    dimensions: Dimensions['dimensions'];
    globalAttributes: Attribute[];
    variables: Variables['variables'];
}
/**
 * Reads the file header as @see {@link Header}
 * @param buffer - Buffer for the file data
 * @param version - Version of the file
 * @returns
 */
export declare function header(buffer: IOBuffer, version: number): Header;
export interface Dimensions {
    dimensions: Array<{
        name: string;
        size: number;
    }>;
    recordId?: number;
    recordName?: string;
}
export interface Attribute {
    name: string;
    type: string;
    value: number | string;
}
export interface Variable {
    name: string;
    dimensions: number[];
    attributes: [];
    type: string;
    size: number;
    offset: number;
    record: boolean;
}
interface Variables {
    variables: Variable[];
    recordStep: number;
}
export {};
//# sourceMappingURL=header.d.ts.map