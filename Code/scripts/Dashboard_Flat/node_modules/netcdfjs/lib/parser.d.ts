import { IOBuffer } from 'iobuffer';
import { Header } from './header';
import { toString } from './toString';
/**
 * Reads a NetCDF v3.x file
 * [See specification](https://www.unidata.ucar.edu/software/netcdf/docs/file_format_specifications.html)
 * @param data - ArrayBuffer or any Typed Array (including Node.js' Buffer from v4) with the data
 * @constructor
 */
export declare class NetCDFReader {
    header: Header;
    buffer: IOBuffer;
    constructor(data: BinaryData);
    /**
     * @return - Version for the NetCDF format
     */
    get version(): "classic format" | "64-bit offset format";
    /**
     * @return {object} - Metadata for the record dimension
     *  * `length`: Number of elements in the record dimension
     *  * `id`: Id number in the list of dimensions for the record dimension
     *  * `name`: String with the name of the record dimension
     *  * `recordStep`: Number with the record variables step size
     */
    get recordDimension(): {
        length: number;
        id?: number | undefined;
        name?: string | undefined;
        recordStep?: number | undefined;
    };
    /**
     * @return - Array - List of dimensions with:
     *  * `name`: String with the name of the dimension
     *  * `size`: Number with the size of the dimension
     */
    get dimensions(): {
        name: string;
        size: number;
    }[];
    /**
     * @return - Array - List of global attributes with:
     *  * `name`: String with the name of the attribute
     *  * `type`: String with the type of the attribute
     *  * `value`: A number or string with the value of the attribute
     */
    get globalAttributes(): Header['globalAttributes'];
    /**
     * Returns the value of an attribute
     * @param - AttributeName
     * @return - Value of the attributeName or null
     */
    getAttribute(attributeName: string): string | number | null;
    /**
     * Returns the value of a variable as a string
     * @param - variableName
     * @return - Value of the variable as a string or null
     */
    getDataVariableAsString(variableName: string): string | null;
    get variables(): import("./header").Variable[];
    toString: typeof toString;
    /**
     * Retrieves the data for a given variable
     * @param variableName - Name of the variable to search or variable object
     * @return The variable values
     */
    getDataVariable(variableName: string | Header['variables'][number]): (string | number | number[])[];
    /**
     * Check if a dataVariable exists
     * @param variableName - Name of the variable to find
     * @return boolean
     */
    dataVariableExists(variableName: string): boolean;
    /**
     * Check if an attribute exists
     * @param attributeName - Name of the attribute to find
     * @return boolean
     */
    attributeExists(attributeName: string): boolean;
}
//# sourceMappingURL=parser.d.ts.map