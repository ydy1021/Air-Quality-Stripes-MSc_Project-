{"ast":null,"code":"var _jsxFileName = \"E:\\\\Master2\\\\FYP\\\\Global\\\\Global\\\\dashboard_ComparisionVersion\\\\src\\\\PM25Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\n// PM2.5色阶区间和颜色，与MultiTrendCharts.js保持一致\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bounds = [0, 5, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 99999];\nconst c_list = ['rgb(164,255,255)',\n// 0 - 5\n'rgb(176,218,233)',\n// 5 - 10\n'rgb(176,206,237)',\n// 10 - 15\n'rgb(249,224,71)',\n// 15 - 20\n'rgb(242,200,75)',\n// 20 - 30\n'rgb(241,166,63)',\n// 30 - 40\n'rgb(233,135,37)',\n// 40 - 50\n'rgb(175,69,83)',\n// 50 - 60\n'rgb(134,59,71)',\n// 60 - 70\n'rgb(103,58,61)',\n// 70 - 80\n'rgb(70,47,48)',\n// 80 - 90\n'rgb(37,36,36)' // 90+\n];\nfunction getColor(val) {\n  if (val === null || val === undefined || isNaN(val)) return '#e0e0e0';\n  for (let i = 0; i < bounds.length - 1; ++i) {\n    if (val >= bounds[i] && val < bounds[i + 1]) return c_list[i];\n  }\n  return c_list[c_list.length - 1];\n}\n\n// 将RGB字符串转换为RGB数组\nfunction parseRGB(rgbString) {\n  const match = rgbString.match(/rgb\\((\\d+),(\\d+),(\\d+)\\)/);\n  if (match) {\n    return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\n  }\n  return [224, 224, 224]; // 默认灰色\n}\nfunction PM25Canvas({\n  pm25Loader,\n  projection,\n  width,\n  height,\n  cities = [],\n  transform = {\n    k: 1,\n    x: 0,\n    y: 0\n  }\n}) {\n  _s();\n  const canvasRef = useRef();\n  useEffect(() => {\n    if (!pm25Loader || !pm25Loader.data || !projection) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // 清空画布\n    ctx.clearRect(0, 0, width, height);\n    console.log('Rendering PM2.5 grid with Canvas... Scale:', transform.k);\n    const gridData = pm25Loader.data.data;\n    let renderedCount = 0;\n\n    // 创建城市点位置集合，用于避让（考虑缩放变换）\n    const cityPositions = cities.map(city => {\n      const projected = projection([city.lng, city.lat]);\n      if (!projected) return null;\n\n      // 应用缩放变换\n      const transformedX = projected[0] * transform.k + transform.x;\n      const transformedY = projected[1] * transform.k + transform.y;\n      return {\n        x: transformedX,\n        y: transformedY\n      };\n    }).filter(pos => pos !== null);\n\n    // 创建ImageData对象用于批量像素操作\n    const imageData = ctx.createImageData(width, height);\n    const data = imageData.data;\n\n    // 网格大小（根据缩放级别调整）\n    const baseGridSize = 2;\n    const gridSize = Math.max(1, Math.round(baseGridSize * transform.k));\n    const cityAvoidRadius = 8; // 城市点周围的避让半径（屏幕像素）\n\n    // 渲染每个网格点\n    for (const point of gridData) {\n      const projected = projection([point.lon, point.lat]);\n      if (!projected) continue;\n\n      // 应用缩放变换\n      const transformedX = projected[0] * transform.k + transform.x;\n      const transformedY = projected[1] * transform.k + transform.y;\n\n      // 视口裁剪\n      if (transformedX < -gridSize || transformedX >= width + gridSize || transformedY < -gridSize || transformedY >= height + gridSize) continue;\n\n      // 检查是否与城市点冲突\n      const tooCloseToCity = cityPositions.some(cityPos => {\n        const distance = Math.sqrt(Math.pow(transformedX - cityPos.x, 2) + Math.pow(transformedY - cityPos.y, 2));\n        return distance < cityAvoidRadius;\n      });\n      if (tooCloseToCity) continue; // 跳过城市点附近的网格\n\n      // 获取颜色\n      const color = getColor(point.value);\n      const [r, g, b] = parseRGB(color);\n\n      // 增强颜色饱和度，让颜色更鲜明\n      const enhancedR = Math.min(255, Math.round(r * 1.1));\n      const enhancedG = Math.min(255, Math.round(g * 1.1));\n      const enhancedB = Math.min(255, Math.round(b * 1.1));\n\n      // 绘制网格点（小矩形）\n      const startX = Math.max(0, Math.floor(transformedX - gridSize / 2));\n      const endX = Math.min(width - 1, Math.floor(transformedX + gridSize / 2));\n      const startY = Math.max(0, Math.floor(transformedY - gridSize / 2));\n      const endY = Math.min(height - 1, Math.floor(transformedY + gridSize / 2));\n      for (let px = startX; px <= endX; px++) {\n        for (let py = startY; py <= endY; py++) {\n          const index = (py * width + px) * 4;\n          data[index] = enhancedR; // Red\n          data[index + 1] = enhancedG; // Green\n          data[index + 2] = enhancedB; // Blue\n          data[index + 3] = 180; // Alpha (约70%透明度)\n        }\n      }\n      renderedCount++;\n    }\n\n    // 将ImageData绘制到canvas\n    ctx.putImageData(imageData, 0, 0);\n    console.log(`Canvas rendered ${renderedCount} grid points at scale ${transform.k.toFixed(2)}`);\n  }, [pm25Loader, projection, width, height, cities, transform]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height,\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      pointerEvents: 'none',\n      // 让鼠标事件穿透到下层SVG\n      zIndex: 1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(PM25Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = PM25Canvas;\nexport default PM25Canvas;\nvar _c;\n$RefreshReg$(_c, \"PM25Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","d3","jsxDEV","_jsxDEV","bounds","c_list","getColor","val","undefined","isNaN","i","length","parseRGB","rgbString","match","parseInt","PM25Canvas","pm25Loader","projection","width","height","cities","transform","k","x","y","_s","canvasRef","data","canvas","current","ctx","getContext","clearRect","console","log","gridData","renderedCount","cityPositions","map","city","projected","lng","lat","transformedX","transformedY","filter","pos","imageData","createImageData","baseGridSize","gridSize","Math","max","round","cityAvoidRadius","point","lon","tooCloseToCity","some","cityPos","distance","sqrt","pow","color","value","r","g","b","enhancedR","min","enhancedG","enhancedB","startX","floor","endX","startY","endY","px","py","index","putImageData","toFixed","ref","style","position","top","left","pointerEvents","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Master2/FYP/Global/Global/dashboard_ComparisionVersion/src/PM25Canvas.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\n// PM2.5色阶区间和颜色，与MultiTrendCharts.js保持一致\nconst bounds = [0, 5, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 99999];\nconst c_list = [\n  'rgb(164,255,255)',  // 0 - 5\n  'rgb(176,218,233)',  // 5 - 10\n  'rgb(176,206,237)',  // 10 - 15\n  'rgb(249,224,71)',   // 15 - 20\n  'rgb(242,200,75)',   // 20 - 30\n  'rgb(241,166,63)',   // 30 - 40\n  'rgb(233,135,37)',   // 40 - 50\n  'rgb(175,69,83)',    // 50 - 60\n  'rgb(134,59,71)',    // 60 - 70\n  'rgb(103,58,61)',    // 70 - 80\n  'rgb(70,47,48)',     // 80 - 90\n  'rgb(37,36,36)',     // 90+\n];\n\nfunction getColor(val) {\n  if (val === null || val === undefined || isNaN(val)) return '#e0e0e0';\n  for (let i = 0; i < bounds.length - 1; ++i) {\n    if (val >= bounds[i] && val < bounds[i + 1]) return c_list[i];\n  }\n  return c_list[c_list.length - 1];\n}\n\n// 将RGB字符串转换为RGB数组\nfunction parseRGB(rgbString) {\n  const match = rgbString.match(/rgb\\((\\d+),(\\d+),(\\d+)\\)/);\n  if (match) {\n    return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\n  }\n  return [224, 224, 224]; // 默认灰色\n}\n\nfunction PM25Canvas({ pm25Loader, projection, width, height, cities = [], transform = { k: 1, x: 0, y: 0 } }) {\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    if (!pm25Loader || !pm25Loader.data || !projection) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // 清空画布\n    ctx.clearRect(0, 0, width, height);\n    \n    console.log('Rendering PM2.5 grid with Canvas... Scale:', transform.k);\n    \n    const gridData = pm25Loader.data.data;\n    let renderedCount = 0;\n    \n    // 创建城市点位置集合，用于避让（考虑缩放变换）\n    const cityPositions = cities.map(city => {\n      const projected = projection([city.lng, city.lat]);\n      if (!projected) return null;\n      \n      // 应用缩放变换\n      const transformedX = projected[0] * transform.k + transform.x;\n      const transformedY = projected[1] * transform.k + transform.y;\n      \n      return { x: transformedX, y: transformedY };\n    }).filter(pos => pos !== null);\n    \n    // 创建ImageData对象用于批量像素操作\n    const imageData = ctx.createImageData(width, height);\n    const data = imageData.data;\n    \n    // 网格大小（根据缩放级别调整）\n    const baseGridSize = 2;\n    const gridSize = Math.max(1, Math.round(baseGridSize * transform.k));\n    const cityAvoidRadius = 8; // 城市点周围的避让半径（屏幕像素）\n    \n    // 渲染每个网格点\n    for (const point of gridData) {\n      const projected = projection([point.lon, point.lat]);\n      if (!projected) continue;\n      \n      // 应用缩放变换\n      const transformedX = projected[0] * transform.k + transform.x;\n      const transformedY = projected[1] * transform.k + transform.y;\n      \n      // 视口裁剪\n      if (transformedX < -gridSize || transformedX >= width + gridSize || \n          transformedY < -gridSize || transformedY >= height + gridSize) continue;\n      \n      // 检查是否与城市点冲突\n      const tooCloseToCity = cityPositions.some(cityPos => {\n        const distance = Math.sqrt(\n          Math.pow(transformedX - cityPos.x, 2) + \n          Math.pow(transformedY - cityPos.y, 2)\n        );\n        return distance < cityAvoidRadius;\n      });\n      \n      if (tooCloseToCity) continue; // 跳过城市点附近的网格\n      \n      // 获取颜色\n      const color = getColor(point.value);\n      const [r, g, b] = parseRGB(color);\n      \n      // 增强颜色饱和度，让颜色更鲜明\n      const enhancedR = Math.min(255, Math.round(r * 1.1));\n      const enhancedG = Math.min(255, Math.round(g * 1.1));\n      const enhancedB = Math.min(255, Math.round(b * 1.1));\n      \n      // 绘制网格点（小矩形）\n      const startX = Math.max(0, Math.floor(transformedX - gridSize/2));\n      const endX = Math.min(width - 1, Math.floor(transformedX + gridSize/2));\n      const startY = Math.max(0, Math.floor(transformedY - gridSize/2));\n      const endY = Math.min(height - 1, Math.floor(transformedY + gridSize/2));\n      \n      for (let px = startX; px <= endX; px++) {\n        for (let py = startY; py <= endY; py++) {\n          const index = (py * width + px) * 4;\n          data[index] = enhancedR;     // Red\n          data[index + 1] = enhancedG; // Green\n          data[index + 2] = enhancedB; // Blue\n          data[index + 3] = 180; // Alpha (约70%透明度)\n        }\n      }\n      \n      renderedCount++;\n    }\n    \n    // 将ImageData绘制到canvas\n    ctx.putImageData(imageData, 0, 0);\n    \n    console.log(`Canvas rendered ${renderedCount} grid points at scale ${transform.k.toFixed(2)}`);\n    \n  }, [pm25Loader, projection, width, height, cities, transform]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={width}\n      height={height}\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none', // 让鼠标事件穿透到下层SVG\n        zIndex: 1\n      }}\n    />\n  );\n}\n\nexport default PM25Canvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}