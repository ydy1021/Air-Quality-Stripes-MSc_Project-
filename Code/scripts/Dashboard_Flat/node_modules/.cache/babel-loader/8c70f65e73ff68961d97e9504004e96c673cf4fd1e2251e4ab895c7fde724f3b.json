{"ast":null,"code":"var _jsxFileName = \"E:\\\\Master2\\\\FYP\\\\Global\\\\Global\\\\dashboard_ComparisionVersion\\\\src\\\\PM25Canvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\n// PM2.5色阶区间和颜色，与MultiTrendCharts.js保持一致\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst bounds = [0, 5, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 99999];\nconst c_list = ['rgb(164,255,255)',\n// 0 - 5\n'rgb(176,218,233)',\n// 5 - 10\n'rgb(176,206,237)',\n// 10 - 15\n'rgb(249,224,71)',\n// 15 - 20\n'rgb(242,200,75)',\n// 20 - 30\n'rgb(241,166,63)',\n// 30 - 40\n'rgb(233,135,37)',\n// 40 - 50\n'rgb(175,69,83)',\n// 50 - 60\n'rgb(134,59,71)',\n// 60 - 70\n'rgb(103,58,61)',\n// 70 - 80\n'rgb(70,47,48)',\n// 80 - 90\n'rgb(37,36,36)' // 90+\n];\nfunction getColor(val) {\n  if (val === null || val === undefined || isNaN(val)) return '#e0e0e0';\n  for (let i = 0; i < bounds.length - 1; ++i) {\n    if (val >= bounds[i] && val < bounds[i + 1]) return c_list[i];\n  }\n  return c_list[c_list.length - 1];\n}\n\n// 将RGB字符串转换为RGB数组\nfunction parseRGB(rgbString) {\n  const match = rgbString.match(/rgb\\((\\d+),(\\d+),(\\d+)\\)/);\n  if (match) {\n    return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\n  }\n  return [224, 224, 224]; // 默认灰色\n}\nfunction PM25Canvas({\n  pm25Loader,\n  projection,\n  width,\n  height,\n  cities = []\n}) {\n  _s();\n  const canvasRef = useRef();\n  useEffect(() => {\n    if (!pm25Loader || !pm25Loader.data || !projection) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // 清空画布\n    ctx.clearRect(0, 0, width, height);\n    console.log('Rendering PM2.5 grid with Canvas...');\n    const gridData = pm25Loader.data.data;\n    let renderedCount = 0;\n\n    // 创建城市点位置集合，用于避让\n    const cityPositions = cities.map(city => {\n      const projected = projection([city.lng, city.lat]);\n      return projected ? {\n        x: projected[0],\n        y: projected[1]\n      } : null;\n    }).filter(pos => pos !== null);\n\n    // 创建ImageData对象用于批量像素操作\n    const imageData = ctx.createImageData(width, height);\n    const data = imageData.data;\n\n    // 网格大小\n    const gridSize = 2; // 减小网格大小，让渲染更精细\n    const cityAvoidRadius = 8; // 城市点周围的避让半径\n\n    // 渲染每个网格点\n    for (const point of gridData) {\n      const projected = projection([point.lon, point.lat]);\n      if (!projected) continue;\n      const [x, y] = projected;\n\n      // 视口裁剪\n      if (x < 0 || x >= width || y < 0 || y >= height) continue;\n\n      // 检查是否与城市点冲突\n      const tooCloseToCity = cityPositions.some(cityPos => {\n        const distance = Math.sqrt(Math.pow(x - cityPos.x, 2) + Math.pow(y - cityPos.y, 2));\n        return distance < cityAvoidRadius;\n      });\n      if (tooCloseToCity) continue; // 跳过城市点附近的网格\n\n      // 获取颜色\n      const color = getColor(point.value);\n      const [r, g, b] = parseRGB(color);\n\n      // 绘制网格点（小矩形）\n      const startX = Math.max(0, Math.floor(x - gridSize / 2));\n      const endX = Math.min(width - 1, Math.floor(x + gridSize / 2));\n      const startY = Math.max(0, Math.floor(y - gridSize / 2));\n      const endY = Math.min(height - 1, Math.floor(y + gridSize / 2));\n      for (let px = startX; px <= endX; px++) {\n        for (let py = startY; py <= endY; py++) {\n          const index = (py * width + px) * 4;\n          data[index] = r; // Red\n          data[index + 1] = g; // Green\n          data[index + 2] = b; // Blue\n          data[index + 3] = 120; // Alpha (约47%透明度，降低以减少模糊)\n        }\n      }\n      renderedCount++;\n    }\n\n    // 将ImageData绘制到canvas\n    ctx.putImageData(imageData, 0, 0);\n    console.log(`Canvas rendered ${renderedCount} grid points`);\n  }, [pm25Loader, projection, width, height, cities]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: width,\n    height: height,\n    style: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      pointerEvents: 'none',\n      // 让鼠标事件穿透到下层SVG\n      zIndex: 1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(PM25Canvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = PM25Canvas;\nexport default PM25Canvas;\nvar _c;\n$RefreshReg$(_c, \"PM25Canvas\");","map":{"version":3,"names":["React","useRef","useEffect","d3","jsxDEV","_jsxDEV","bounds","c_list","getColor","val","undefined","isNaN","i","length","parseRGB","rgbString","match","parseInt","PM25Canvas","pm25Loader","projection","width","height","cities","_s","canvasRef","data","canvas","current","ctx","getContext","clearRect","console","log","gridData","renderedCount","cityPositions","map","city","projected","lng","lat","x","y","filter","pos","imageData","createImageData","gridSize","cityAvoidRadius","point","lon","tooCloseToCity","some","cityPos","distance","Math","sqrt","pow","color","value","r","g","b","startX","max","floor","endX","min","startY","endY","px","py","index","putImageData","ref","style","position","top","left","pointerEvents","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Master2/FYP/Global/Global/dashboard_ComparisionVersion/src/PM25Canvas.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\n// PM2.5色阶区间和颜色，与MultiTrendCharts.js保持一致\r\nconst bounds = [0, 5, 10, 15, 20, 30, 40, 50, 60, 70, 80, 90, 99999];\r\nconst c_list = [\r\n  'rgb(164,255,255)',  // 0 - 5\r\n  'rgb(176,218,233)',  // 5 - 10\r\n  'rgb(176,206,237)',  // 10 - 15\r\n  'rgb(249,224,71)',   // 15 - 20\r\n  'rgb(242,200,75)',   // 20 - 30\r\n  'rgb(241,166,63)',   // 30 - 40\r\n  'rgb(233,135,37)',   // 40 - 50\r\n  'rgb(175,69,83)',    // 50 - 60\r\n  'rgb(134,59,71)',    // 60 - 70\r\n  'rgb(103,58,61)',    // 70 - 80\r\n  'rgb(70,47,48)',     // 80 - 90\r\n  'rgb(37,36,36)',     // 90+\r\n];\r\n\r\nfunction getColor(val) {\r\n  if (val === null || val === undefined || isNaN(val)) return '#e0e0e0';\r\n  for (let i = 0; i < bounds.length - 1; ++i) {\r\n    if (val >= bounds[i] && val < bounds[i + 1]) return c_list[i];\r\n  }\r\n  return c_list[c_list.length - 1];\r\n}\r\n\r\n// 将RGB字符串转换为RGB数组\r\nfunction parseRGB(rgbString) {\r\n  const match = rgbString.match(/rgb\\((\\d+),(\\d+),(\\d+)\\)/);\r\n  if (match) {\r\n    return [parseInt(match[1]), parseInt(match[2]), parseInt(match[3])];\r\n  }\r\n  return [224, 224, 224]; // 默认灰色\r\n}\r\n\r\nfunction PM25Canvas({ pm25Loader, projection, width, height, cities = [] }) {\r\n  const canvasRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!pm25Loader || !pm25Loader.data || !projection) return;\r\n\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // 清空画布\r\n    ctx.clearRect(0, 0, width, height);\r\n    \r\n    console.log('Rendering PM2.5 grid with Canvas...');\r\n    \r\n    const gridData = pm25Loader.data.data;\r\n    let renderedCount = 0;\r\n    \r\n    // 创建城市点位置集合，用于避让\r\n    const cityPositions = cities.map(city => {\r\n      const projected = projection([city.lng, city.lat]);\r\n      return projected ? { x: projected[0], y: projected[1] } : null;\r\n    }).filter(pos => pos !== null);\r\n    \r\n    // 创建ImageData对象用于批量像素操作\r\n    const imageData = ctx.createImageData(width, height);\r\n    const data = imageData.data;\r\n    \r\n    // 网格大小\r\n    const gridSize = 2; // 减小网格大小，让渲染更精细\r\n    const cityAvoidRadius = 8; // 城市点周围的避让半径\r\n    \r\n    // 渲染每个网格点\r\n    for (const point of gridData) {\r\n      const projected = projection([point.lon, point.lat]);\r\n      if (!projected) continue;\r\n      \r\n      const [x, y] = projected;\r\n      \r\n      // 视口裁剪\r\n      if (x < 0 || x >= width || y < 0 || y >= height) continue;\r\n      \r\n      // 检查是否与城市点冲突\r\n      const tooCloseToCity = cityPositions.some(cityPos => {\r\n        const distance = Math.sqrt(Math.pow(x - cityPos.x, 2) + Math.pow(y - cityPos.y, 2));\r\n        return distance < cityAvoidRadius;\r\n      });\r\n      \r\n      if (tooCloseToCity) continue; // 跳过城市点附近的网格\r\n      \r\n      // 获取颜色\r\n      const color = getColor(point.value);\r\n      const [r, g, b] = parseRGB(color);\r\n      \r\n      // 绘制网格点（小矩形）\r\n      const startX = Math.max(0, Math.floor(x - gridSize/2));\r\n      const endX = Math.min(width - 1, Math.floor(x + gridSize/2));\r\n      const startY = Math.max(0, Math.floor(y - gridSize/2));\r\n      const endY = Math.min(height - 1, Math.floor(y + gridSize/2));\r\n      \r\n      for (let px = startX; px <= endX; px++) {\r\n        for (let py = startY; py <= endY; py++) {\r\n          const index = (py * width + px) * 4;\r\n          data[index] = r;     // Red\r\n          data[index + 1] = g; // Green\r\n          data[index + 2] = b; // Blue\r\n          data[index + 3] = 120; // Alpha (约47%透明度，降低以减少模糊)\r\n        }\r\n      }\r\n      \r\n      renderedCount++;\r\n    }\r\n    \r\n    // 将ImageData绘制到canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n    \r\n    console.log(`Canvas rendered ${renderedCount} grid points`);\r\n    \r\n  }, [pm25Loader, projection, width, height, cities]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={width}\r\n      height={height}\r\n      style={{\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        pointerEvents: 'none', // 让鼠标事件穿透到下层SVG\r\n        zIndex: 1\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default PM25Canvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}