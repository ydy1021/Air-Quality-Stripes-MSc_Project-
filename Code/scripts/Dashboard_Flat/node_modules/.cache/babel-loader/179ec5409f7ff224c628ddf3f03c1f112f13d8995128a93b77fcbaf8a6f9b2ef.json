{"ast":null,"code":"import { num2bytes, str2num, readType } from './types';\n// const STREAMING = 4294967295;\n/**\n * Read data for the given non-record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @return - Data of the element\n */\nexport function nonRecord(buffer, variable) {\n  // variable type\n  const type = str2num(variable.type);\n  // size of the data\n  const size = variable.size / num2bytes(type);\n  // iterates over the data\n  const data = new Array(size);\n  for (let i = 0; i < size; i++) {\n    data[i] = readType(buffer, type, 1);\n  }\n  return data;\n}\n/**\n * Read data for the given record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @param recordDimension - Record dimension metadata\n * @return - Data of the element\n */\nexport function record(buffer, variable, recordDimension) {\n  // variable type\n  const type = str2num(variable.type);\n  const width = variable.size ? variable.size / num2bytes(type) : 1;\n  // size of the data\n  // TODO streaming data\n  const size = recordDimension.length;\n  // iterates over the data\n  const data = new Array(size);\n  const step = recordDimension.recordStep;\n  if (step) {\n    for (let i = 0; i < size; i++) {\n      const currentOffset = buffer.offset;\n      data[i] = readType(buffer, type, width);\n      buffer.seek(currentOffset + step);\n    }\n  } else {\n    throw new Error('recordDimension.recordStep is undefined');\n  }\n  return data;\n}","map":{"version":3,"names":["num2bytes","str2num","readType","nonRecord","buffer","variable","type","size","data","Array","i","record","recordDimension","width","length","step","recordStep","currentOffset","offset","seek","Error"],"sources":["E:\\Master2\\FYP\\Global\\Global\\dashboard_ComparisionVersion\\node_modules\\netcdfjs\\src\\data.ts"],"sourcesContent":["import { IOBuffer } from 'iobuffer';\n\nimport { Header } from './header';\nimport { num2bytes, str2num, readType } from './types';\n// const STREAMING = 4294967295;\n\n/**\n * Read data for the given non-record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @return - Data of the element\n */\nexport function nonRecord(\n  buffer: IOBuffer,\n  variable: Header['variables'][number],\n): Array<ReturnType<typeof readType>> {\n  // variable type\n  const type = str2num(variable.type);\n\n  // size of the data\n  const size = variable.size / num2bytes(type);\n\n  // iterates over the data\n  const data = new Array(size);\n  for (let i = 0; i < size; i++) {\n    data[i] = readType(buffer, type, 1);\n  }\n\n  return data;\n}\n\n/**\n * Read data for the given record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @param recordDimension - Record dimension metadata\n * @return - Data of the element\n */\nexport function record(\n  buffer: IOBuffer,\n  variable: Header['variables'][number],\n  recordDimension: Header['recordDimension'],\n): Array<ReturnType<typeof readType>> {\n  // variable type\n  const type = str2num(variable.type);\n  const width = variable.size ? variable.size / num2bytes(type) : 1;\n\n  // size of the data\n  // TODO streaming data\n  const size = recordDimension.length;\n\n  // iterates over the data\n  const data = new Array(size);\n  const step = recordDimension.recordStep;\n  if (step) {\n    for (let i = 0; i < size; i++) {\n      const currentOffset = buffer.offset;\n      data[i] = readType(buffer, type, width);\n      buffer.seek(currentOffset + step);\n    }\n  } else {\n    throw new Error('recordDimension.recordStep is undefined');\n  }\n\n  return data;\n}\n"],"mappings":"AAGA,SAASA,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,SAAS;AACtD;AAEA;;;;;;AAMA,OAAM,SAAUC,SAASA,CACvBC,MAAgB,EAChBC,QAAqC;EAErC;EACA,MAAMC,IAAI,GAAGL,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC;EAEnC;EACA,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI,GAAGP,SAAS,CAACM,IAAI,CAAC;EAE5C;EACA,MAAME,IAAI,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC;EAC5B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAE;IAC7BF,IAAI,CAACE,CAAC,CAAC,GAAGR,QAAQ,CAACE,MAAM,EAAEE,IAAI,EAAE,CAAC,CAAC;;EAGrC,OAAOE,IAAI;AACb;AAEA;;;;;;;AAOA,OAAM,SAAUG,MAAMA,CACpBP,MAAgB,EAChBC,QAAqC,EACrCO,eAA0C;EAE1C;EACA,MAAMN,IAAI,GAAGL,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC;EACnC,MAAMO,KAAK,GAAGR,QAAQ,CAACE,IAAI,GAAGF,QAAQ,CAACE,IAAI,GAAGP,SAAS,CAACM,IAAI,CAAC,GAAG,CAAC;EAEjE;EACA;EACA,MAAMC,IAAI,GAAGK,eAAe,CAACE,MAAM;EAEnC;EACA,MAAMN,IAAI,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC;EAC5B,MAAMQ,IAAI,GAAGH,eAAe,CAACI,UAAU;EACvC,IAAID,IAAI,EAAE;IACR,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAE;MAC7B,MAAMO,aAAa,GAAGb,MAAM,CAACc,MAAM;MACnCV,IAAI,CAACE,CAAC,CAAC,GAAGR,QAAQ,CAACE,MAAM,EAAEE,IAAI,EAAEO,KAAK,CAAC;MACvCT,MAAM,CAACe,IAAI,CAACF,aAAa,GAAGF,IAAI,CAAC;;GAEpC,MAAM;IACL,MAAM,IAAIK,KAAK,CAAC,yCAAyC,CAAC;;EAG5D,OAAOZ,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}